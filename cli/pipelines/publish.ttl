@base <urn:pipeline:cube-creator> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<#Main> a :Pipeline ;
        :steps
          [
            :stepList
              (
                <#concatStreams>
                <#removeHydraTriples>
                <#uniqueBnodes>
                <#countOutputQuads>
                <#StreamOutput>
              ) ;
          ] .

<#concatStreams>
  a :Step ;
  code:implementedBy
    [
      a code:EcmaScriptModule ;
      code:link <node:barnard59-base/concat.js#object>
    ] ;
  code:arguments
    (
      <#cubeMetadata>
      <#PublishedLatestCube>
      <#ExpirePreviousVersions>
    )
.

<#cubeMetadata>
  a :Pipeline, :ReadableObjectMode ;
  :steps
    [
      :stepList (
                  <#loadCubeMetadata>
                  <#shaclValidate>
                  <#flatten>
                ) ;
    ] ;
.

<#PublishedLatestCube>
  a :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList ( <#loadCube>
                       <#countInputQuads>
                       <#injectCubeRevision>
                       <#injectObservedBy>
                       <#injectSoftwareVersions>
                     ) ]
.
<#shaclValidate> a :Step ;
  code:implementedBy
    [
      a code:EcmaScriptModule ;
      code:link <node:barnard59-validate-shacl/validate.js#shacl>
    ] ;
  code:arguments
    [ code:name "shape" ; code:value <#loadShapes> ] ,
    [ code:name "maxErrors" ; code:value 100 ] ,
    [
      code:name "onViolation" ;
      code:value [ a code:EcmaScript ; code:link <file:../lib/log#prettyPrintReport> ]
    ] ;
.

<#loadShapes>
  a :Pipeline, :ReadableObjectMode ;
  :steps
    [
      :stepList
        (
          [
            a :Step ;
            code:implementedBy
              [
                code:link <node:fs#createReadStream> ;
                a code:EcmaScriptModule ;
              ] ;
            code:arguments ( "shapesPath"^^:VariableName )
          ]
          [
            a :Step ;
            code:implementedBy
              [
                code:link <node:barnard59-formats/n3.js#parse> ;
                a code:EcmaScriptModule ;
              ] ;
          ]
        )
    ] .

<#flatten> a :Step ;
  code:implementedBy
    [
      a code:EcmaScriptModule ;
      code:link <node:barnard59-base/flatten.js#default> ;
    ] .

<#countInputQuads>
  a :Step ;
  code:implementedBy
    [
      a code:EcmaScript ;
      code:link <file:../lib/counters#quads>
    ] ;
  code:arguments ( "in" ) ;
.

<#countOutputQuads>
  a :Step ;
  code:implementedBy
    [
      a code:EcmaScript ;
      code:link <file:../lib/counters#quads>
    ] ;
  code:arguments ( "out" ) ;
.

<#ExpirePreviousVersions>
  a :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList ( <#expirePreviousVersions> ) ] ;
.

<#loadCube>
  a      :Pipeline, :ReadableObjectMode;
  :steps [ :stepList (  _:get ) ] ;.

_:get
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
                       code:link <file:../lib/loadCube#loadCube> ] ;

  code:arguments     [ code:name  "jobUri" ;
                       code:value "jobUri"^^:VariableName ] ;
  code:arguments     [ code:name  "endpoint" ;
                       code:value "graph-query-endpoint"^^:VariableName ] ;
  code:arguments     [ code:name  "user" ;
                       code:value "graph-store-user"^^:VariableName ] ;
  code:arguments     [ code:name  "password" ;
                       code:value "graph-store-password"^^:VariableName ] .

<#injectObservedBy>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/metadata#injectObservedBy> ;
                         a code:EcmaScript
                     ] ;
  code:arguments     ( "jobUri"^^:VariableName ) ;
.

<#injectCubeRevision>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/cube#injectRevision> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#injectSoftwareVersions>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/publish/versions#inject> ;
                       a         code:EcmaScript ] .

<#expirePreviousVersions>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/cube#expirePreviousVersions> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#loadCubeMetadata>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/metadata#loadCubeMetadata> ;
                       a         code:EcmaScript ] ;
  code:arguments
    [
      code:name "jobUri" ;
      code:value "jobUri"^^:VariableName
    ] ;
  code:arguments
    [
      code:name "endpoint" ;
      code:value "graph-query-endpoint"^^:VariableName
    ] ;
  code:arguments
    [
      code:name "user" ;
      code:value "graph-store-user"^^:VariableName
    ] ;
  code:arguments
    [
      code:name "password" ;
      code:value "graph-store-password"^^:VariableName
    ] .

<#uniqueBnodes>
  a :Step ;
  code:implementedBy [ a code:EcmaScriptModule ; code:link <node:barnard59-base/map.js#default> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#ensureUniqueBnodes> ;
                         a         code:EcmaScript ] ) ;
.

<#removeHydraTriples>
  a :Step ;
  code:implementedBy [ a code:EcmaScriptModule ; code:link <node:barnard59-base/filter.js#default> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#removeHydraTriples> ;
                           a         code:EcmaScript ] ) ;
.

<#StreamOutput>
  a :Pipeline, :WritableObjectMode ;
.
