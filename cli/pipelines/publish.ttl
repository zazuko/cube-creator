@base <urn:pipeline:cube-creator> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<#Main> a :Pipeline ;
  :steps [ :stepList ( <#loadGraphStep> <#injectCubeRevision> <#injectMetadata> <#filter> <#uniqueBnodes> <#ToDefaultGraph> <#streamOutputStep> ) ] .

<#loadGraphStep>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/pipeline#asStep> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#loadCube> ) .

<#loadCube>
  a      :Pipeline, :ReadableObjectMode;
  :steps [ :stepList (  _:get ) ] ;.

_:get
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
                       code:link <file:../lib/loadCube#loadCube> ] ;

  code:arguments     [ code:name  "jobUri" ;
                       code:value "jobUri"^^:VariableName ] ;
  code:arguments     [ code:name  "endpoint" ;
                       code:value "graph-store-endpoint"^^:VariableName ] ;
  code:arguments     [ code:name  "user" ;
                       code:value "graph-store-user"^^:VariableName ] ;
  code:arguments     [ code:name  "password" ;
                       code:value "graph-store-password"^^:VariableName ] .

<#injectCubeRevision>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/cube#injectRevision> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#injectMetadata>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/metadata#injectMetadata> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#filter>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
  code:link <node:barnard59-base#filter> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#fromPublished> ;
  a         code:EcmaScript ] ) .

<#uniqueBnodes>
  a :Step ;
  code:implementedBy [ a code:EcmaScript ; code:link <node:barnard59-base#map> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#ensureUniqueBnodes> ;
                         a         code:EcmaScript ] ) ;
.

<#StreamOutput>
  a :Pipeline, :WritableObjectMode .

<#streamOutputStep>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/pipeline#asStep> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#StreamOutput> ) .

<#ToDefaultGraph>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
                       code:link <node:barnard59-base#map> ] ;
  code:arguments     ( "({ subject, predicate, object }) => require('rdf-ext').quad(subject, predicate, object)"^^code:EcmaScript ) .
