@base <urn:pipeline:cube-creator> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<#Main> a :Pipeline ;
  :steps [ :stepList ( <#loadMetadata> <#doTransform> <#streamOutputStep> ) ] .

<#StreamOutput>
  a :Pipeline, :WritableObjectMode .

<#streamOutputStep>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/pipeline#asStep> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#StreamOutput> ) .

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#loadMetadata>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/job#loadCsvMappings> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#SelectAndRunTransformation>
 a :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (<#selectTransformation>) ]
.

<#selectTransformation>
  a :Step ;
  code:implementedBy [code:link <file:../lib/pipeline#selectTransformation> ;
  a         code:EcmaScript ] ;
  code:arguments [
                    code:name "observationTable" ;
                    code:value <#TransformObservationCsv>
                 ], [
                    code:name "otherTable" ;
                    code:value <#TransformCsv>
                 ] .

<#doTransform>
  a                  :Step ;
  code:implementedBy [ code:link <node:barnard59-core#forEach> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#SelectAndRunTransformation>
                       """(p, { csvwResource, isObservationTable }) => {
                            p.variables.set('csvw', csvwResource)
                            p.variables.set('isObservationTable', isObservationTable)
                           }"""^^code:EcmaScript ) .

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformObservationCsv>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (
                       <#loadCsvStep>
                       <#parse>
                       <#filter>
                       <#toDataset>
                       <#toObservation>
                       <#toCubeShape>
                       <#flatten>
                       <#filterCubeLinks>
                     ) ] .

<#TransformCsv>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (
                       <#loadCsvStep>
                       <#parse>
                       <#filter>
                     ) ] .

<#LoadCsv>
  a :Pipeline, :ReadableObjectMode .

<#loadCsvStep>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/pipeline#asStep> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#LoadCsv> ) .

<#parse>
  a                  :Step ;
  code:implementedBy [ code:link <node:barnard59-formats#csvw.parse> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( <#parseMetadata> ) .

<#parseMetadata>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList ( <#getCsvwGraph> ) ] .

<#getCsvwGraph>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/csv#getCsvwTriples> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "csvw"^^:VariableName ) .

<#filter>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
                       code:link <node:barnard59-base#filter> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#fromTransformed> ;
                         a         code:EcmaScript ] ) .

<#toDataset> a :Step;
  code:implementedBy [ a code:EcmaScript;
                       code:link <node:rdf-stream-to-dataset-stream/bySubject.js>
                     ] .

<#toObservation> a :Step;
  code:implementedBy [ a code:EcmaScript;
                       code:link <node:barnard59-rdf/cube.js#toObservation>
                     ] ;
  code:arguments [
                      code:name "observations";
                                code:value [
                                             a code:EcmaScript ;
                                             code:link <file:../lib/cube#getObservationSetId>
                                         ]

                    ], [
                         code:name "observation";
                         code:value "({ dataset, observations }) => ([...dataset][0].subject)"^^code:EcmaScript
                       ] .

<#toCubeShape> a :Step;
  code:implementedBy [ a code:EcmaScript;
  code:link <file:../lib/toCubeShape>
                     ];
  code:arguments [
                   code:name "excludeValuesOf";
                   code:value (
                                "http://www.w3.org/2004/02/skos/core#notation"
                                "https://cube-creator.zazuko.com/vocab#cube"
                                "http://www.w3.org/ns/csvw#describes"
                              )
                 ] , [
                   code:name "cube" ;
                   code:value [ a code:EcmaScript ; code:link <file:../lib/cube#getCubeId> ]
                 ] .

<#flatten> a :Step;
  code:implementedBy [ a code:EcmaScript;
                       code:link <node:barnard59-base#flatten>;
                     ] .

<#filterCubeLinks>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScript ;
  code:link <node:barnard59-base#filter> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#removeCubeLinks> ;
                         a         code:EcmaScript ] ) .
