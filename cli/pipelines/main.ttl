@base <urn:pipeline:cube-creator> .
@prefix : <https://pipeline.described.at/> .
@prefix code: <https://code.described.at/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<#Main> a :Pipeline ;
  :steps [ :stepList ( <#loadMetadata> <#doTransform> <#validate> <#countOutputQuads> <#StreamOutput> ) ] .

<#StreamOutput>
  a :Pipeline, :WritableObjectMode .

# ------------------------------
#
# Transform pipeline
#
# One-by-one parses and transforms the source csv files to RDF
#
# ------------------------------

<#loadMetadata>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/job#loadCsvMappings> ;
                       a         code:EcmaScript ] ;
  code:arguments     ( "jobUri"^^:VariableName ) .

<#SelectAndRunTransformation>
 a :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (<#selectTransformation>) ]
.

<#selectTransformation>
  a :Step ;
  code:implementedBy [code:link <file:../lib/pipeline#selectTransformation> ;
  a         code:EcmaScript ] ;
  code:arguments [
                    code:name "observationTable" ;
                    code:value <#TransformObservationCsv>
                 ], [
                    code:name "otherTable" ;
                    code:value <#TransformCsv>
                 ] .

<#doTransform>
  a                  :Step ;
  code:implementedBy [ code:link <node:barnard59-base/forEach.js#default> ;
                       a         code:EcmaScriptModule ] ;
  code:arguments     ( <#SelectAndRunTransformation> "transformed" ) .

<#countOutputQuads>
  a :Step ;
  code:implementedBy
    [
      a code:EcmaScript ;
      code:link <file:../lib/counters#quads>
    ] ;
  code:arguments ( "out" ) ;
.

# ------------------------------
#
# Transforms individual files
#
# ------------------------------

<#TransformObservationCsv>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (
                       <#LoadCsv>
                       <#parse>
                       <#inspectCsvw>
                       <#substituteUndefined>
                       <#substituteUndefinedReferences>
                       <#filterObservationTable>
                       <#mapDimensions>
                       <#toDataset>
                       <#toObservation>
                       <#toCubeShape>
                       <#flatten>
                       <#filterCubeLinks>
                       <#injectOriginalValueQuads>
                       <#setGraph>
                     ) ] .

<#TransformCsv>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList (
                       <#LoadCsv>
                       <#parse>
                       <#inspectCsvw>
                       <#filterNonObservationTable>
                       <#substituteUndefinedReferences>
                       <#setGraph>
                     ) ] .

<#LoadCsv>
  a :Pipeline, :ReadableObjectMode .

<#parse>
  a                  :Step ;
  code:implementedBy [ code:link <node:barnard59-formats/csvw.js#parse> ;
                       a         code:EcmaScriptModule ] ;
  code:arguments     ( <#parseMetadata> ) .

<#inspectCsvw>
  a :Step ;
  code:implementedBy
    [
      code:link <file:../lib/counters#observeCsvwMetadata> ;
      a code:EcmaScript
    ] ;
.

<#substituteUndefined>
  a                  :Step ;
  code:implementedBy [ code:link <node:barnard59-base/map.js#default> ;
                       a         code:EcmaScriptModule ] ;
  code:arguments     ( [ code:link <file:../lib/output-mapper#substituteUndefined> ;
                         a         code:EcmaScript ] ) .

<#substituteUndefinedReferences>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/output-mapper#substituteUndefinedReferences> ;
                         a         code:EcmaScript ] .

<#parseMetadata>
  a      :Pipeline, :ReadableObjectMode ;
  :steps [ :stepList ( <#getCsvwGraph> ) ] .

<#getCsvwGraph>
  a                  :Step ;
  code:implementedBy [ code:link <file:../lib/csv#getCsvwTriples> ;
                       a         code:EcmaScript ] .

<#mapDimensions>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/output-mapper#mapDimensions> ;
                       a         code:EcmaScript ] .

<#filterNonObservationTable>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScriptModule ;
                       code:link <node:barnard59-base/filter.js#default> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#keepCsvwDescribes> ;
                         a         code:EcmaScript ] ) .

<#filterObservationTable>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScriptModule ;
                       code:link <node:barnard59-base/filter.js#default> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#excludeAllCsvw> ;
                         a         code:EcmaScript ] ) .

<#toDataset> a :Step;
  code:implementedBy [ a code:EcmaScript;
                       code:link <node:rdf-stream-to-dataset-stream/bySubject.js>
                     ] .

<#toObservation> a :Step;
  code:implementedBy [ a code:EcmaScriptModule;
                       code:link <node:barnard59-rdf/cube.js#toObservation>
                     ] ;
  code:arguments [
                      code:name "observations";
                                code:value [
                                             a code:EcmaScript ;
                                             code:link <file:../lib/cube#getObservationSetId>
                                         ]

                    ], [
                         code:name "observation";
                         code:value "({ dataset, observations }) => ([...dataset][0].subject)"^^code:EcmaScript
                       ] .

<#toCubeShape> a :Step;
  code:implementedBy [ a code:EcmaScript;
  code:link <file:../lib/toCubeShape>
                     ];
  code:arguments [
                   code:name "excludeValuesOf";
                   code:value (
                                "http://www.w3.org/2004/02/skos/core#notation"
                                "https://cube-creator.zazuko.com/vocab#cube"
                                "http://www.w3.org/ns/csvw#describes"
                              )
                 ] , [
                   code:name "cube" ;
                   code:value [ a code:EcmaScript ; code:link <file:../lib/cube#getCubeId> ]
                 ] .

<#flatten> a :Step;
  code:implementedBy [ a code:EcmaScriptModule;
                       code:link <node:barnard59-base/flatten.js#default>;
                     ] .

<#filterCubeLinks>
  a                  :Step ;
  code:implementedBy [ a         code:EcmaScriptModule ;
  code:link <node:barnard59-base/filter.js#default> ] ;
  code:arguments     ( [ code:link <file:../lib/output-filter#removeCubeLinks> ;
                         a         code:EcmaScript ] ) .

<#injectOriginalValueQuads>
  a :Step ;
  code:implementedBy [ code:link <file:../lib/output-mapper#injectOriginalValueQuads> ;
                       a         code:EcmaScript ] .
